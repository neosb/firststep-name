name: Create Draft Release

on:
  push:
    branches:
      - main

jobs:
  build-release:
    strategy:
      matrix:
        include:
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
          - runner: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            archive: tar.gz
          - runner: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            archive: tar.gz
          - runner: macos-latest
            target: x86_64-apple-darwin
            archive: tar.gz
          - runner: macos-latest
            target: aarch64-apple-darwin
            archive: tar.gz
          - runner: windows-latest
            target: x86_64-pc-windows-gnu
            archive: zip

    runs-on: ${{ matrix.runner }}

    env:
      BIN_NAME: firststep_name

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal

      - name: Install cross-compile target
        run: rustup target add ${{ matrix.target }}

      - name: Install cross (Linux only)
        if: runner.os == 'Linux'
        run: cargo install cross

      - name: Build binary (Linux)
        if: runner.os == 'Linux'
        run: cross build --release --bin $BIN_NAME --target ${{ matrix.target }}

      - name: Build binary (macOS)
        if: runner.os == 'macOS'
        run: cargo build --release --bin $BIN_NAME --target ${{ matrix.target }}

      - name: Build binary (Windows)
        if: runner.os == 'Windows'
        shell: bash
        env:
          OPENSSL_NO_VENDOR: "1"
        run: choco install openssl; cargo build --release --bin $BIN_NAME --target ${{ matrix.target }}

      - name: Prepare release artifact
        run: |
          mkdir -p release_artifacts
          if [ "${{ matrix.archive }}" = "tar.gz" ]; then
            tar -czvf release_artifacts/${BIN_NAME}-${{ matrix.target }}.tar.gz -C target/${{ matrix.target }}/release $BIN_NAME${{ runner.os == 'Windows' && '.exe' || '' }}
          else
            zip -j release_artifacts/${BIN_NAME}-${{ matrix.target }}.zip target/${{ matrix.target }}/release/${BIN_NAME}.exe
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: release_artifacts/*

  release:
    needs: build-release
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_artifacts

      - name: Install GitHub CLI
        run: sudo apt-get install -y gh

      - name: Create Release Draft
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Automated release with binaries for Linux, macOS, and Windows (x64 and ARM).
            Review and publish this release.
          draft: true
          prerelease: false

      - name: Upload release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for file in release_artifacts/**/*; do
            echo "Uploading $file"
            gh release upload v${{ github.run_number }} "$file" --repo ${{ github.repository }}
          done
        shell: bash
