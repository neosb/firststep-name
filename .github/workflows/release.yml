name: Create Draft Release

on:
  push:
    branches:
      - main

jobs:
  build-release:
    runs-on: ubuntu-latest

    env:
      BIN_NAME: firststep_name

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal

      - name: Install cross-compile targets
        run: |
          rustup target add x86_64-unknown-linux-gnu
          rustup target add aarch64-unknown-linux-gnu
          rustup target add armv7-unknown-linux-gnueabihf
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-pc-windows-gnu

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build all release binaries
        run: |
          cargo build --release --bin $BIN_NAME --target x86_64-unknown-linux-gnu
          cargo build --release --bin $BIN_NAME --target aarch64-unknown-linux-gnu
          cargo build --release --bin $BIN_NAME --target armv7-unknown-linux-gnueabihf
          cargo build --release --bin $BIN_NAME --target x86_64-apple-darwin
          cargo build --release --bin $BIN_NAME --target aarch64-apple-darwin
          cargo build --release --bin $BIN_NAME --target x86_64-pc-windows-gnu

      - name: Prepare release artifacts
        run: |
          mkdir -p release_artifacts
          # Linux
          tar -czvf release_artifacts/firststep_name-x86_64-unknown-linux-gnu.tar.gz -C target/x86_64-unknown-linux-gnu/release firststep_name
          tar -czvf release_artifacts/firststep_name-aarch64-unknown-linux-gnu.tar.gz -C target/aarch64-unknown-linux-gnu/release firststep_name
          tar -czvf release_artifacts/firststep_name-armv7-unknown-linux-gnueabihf.tar.gz -C target/armv7-unknown-linux-gnueabihf/release firststep_name
          # macOS
          tar -czvf release_artifacts/firststep_name-x86_64-apple-darwin.tar.gz -C target/x86_64-apple-darwin/release firststep_name
          tar -czvf release_artifacts/firststep_name-aarch64-apple-darwin.tar.gz -C target/aarch64-apple-darwin/release firststep_name
          # Windows
          zip -j release_artifacts/firststep_name-x86_64-pc-windows-gnu.zip target/x86_64-pc-windows-gnu/release/firststep_name.exe

      - name: Create Release Draft
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Automated release with binaries for Linux, macOS, and Windows (x64 and ARM).
            Review and publish this release.
          draft: true
          prerelease: false

      - name: Upload release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for file in release_artifacts/*; do
            echo "Uploading $file"
            gh release upload v${{ github.run_number }} "$file" --repo ${{ github.repository }}
          done
        shell: bash

      - name: Install GitHub CLI
        run: sudo apt-get install -y gh
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Automated release with binaries for Linux, macOS, and Windows (x64 and ARM).
            Review and publish this release.
          draft: true
          prerelease: false

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ matrix.bin_name }}.${{ matrix.archive_ext }}
          asset_name: ${{ matrix.bin_name }}.${{ matrix.archive_ext }}
          asset_content_type: application/octet-stream # Generic content type, adjust if known (e.g., application/gzip, application/zip)
